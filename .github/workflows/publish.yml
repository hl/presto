name: Publish to Hex.pm

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.1.0, v1.2.3, etc.
  workflow_dispatch:  # Allows manual triggering from GitHub UI
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (build package but do not publish)'
        required: false
        type: boolean
        default: false

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.version.outputs.should_publish }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.18'
        otp-version: '27'
    
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-deps-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-deps-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Determine version and validate
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "Publishing version $VERSION from tag"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "Dry run mode - will not publish"
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "Manual publish of version $VERSION"
          fi
        else
          echo "should_publish=false" >> $GITHUB_OUTPUT
          echo "Not a release trigger"
          exit 1
        fi
        
        # Validate version format
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
        
        # Check if version in mix.exs matches
        MIX_VERSION=$(grep -o 'version: "[^"]*"' mix.exs | cut -d'"' -f2)
        if [[ "$VERSION" != "$MIX_VERSION" ]]; then
          echo "Version mismatch: tag/input=$VERSION, mix.exs=$MIX_VERSION"
          echo "Please update mix.exs version to match"
          exit 1
        fi
    
    - name: Run full test suite
      run: |
        mix compile --warnings-as-errors
        mix test
        mix format --check-formatted
        mix credo --strict
    
    - name: Build and validate package
      run: |
        mix hex.build
        echo "Package built successfully"
        ls -la ex_presto-*.tar

  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_publish == 'true'
    environment: 
      name: hex-publishing
      url: https://hex.pm/packages/ex_presto
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.18'
        otp-version: '27'
    
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-deps-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-deps-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Build package
      run: mix hex.build
    
    - name: Publish to Hex.pm
      run: mix hex.publish --yes
      env:
        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        release_name: Release v${{ needs.validate.outputs.version }}
        body: |
          ## ex_presto v${{ needs.validate.outputs.version }}
          
          Published to [Hex.pm](https://hex.pm/packages/ex_presto/${{ needs.validate.outputs.version }})
          
          ### Installation
          ```elixir
          def deps do
            [
              {:ex_presto, "~> ${{ needs.validate.outputs.version }}"}
            ]
          end
          ```
          
          ### Documentation
          - [HexDocs](https://hexdocs.pm/ex_presto/${{ needs.validate.outputs.version }})
          - [GitHub](https://github.com/hl/presto)
          
          See [CHANGELOG.md](https://github.com/hl/presto/blob/main/CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: ${{ contains(needs.validate.outputs.version, '-') }}

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: always() && needs.publish.result == 'success'
    
    steps:
    - name: Notify success
      run: |
        echo "ðŸŽ‰ Successfully published ex_presto v${{ needs.validate.outputs.version }} to Hex.pm!"
        echo "ðŸ“¦ Package: https://hex.pm/packages/ex_presto/${{ needs.validate.outputs.version }}"
        echo "ðŸ“š Docs: https://hexdocs.pm/ex_presto/${{ needs.validate.outputs.version }}"