name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (e.g., 0.2.0)'
        required: true
        type: string
      changelog_entry:
        description: 'Brief description of changes'
        required: true
        type: string

jobs:
  prepare-release:
    name: Prepare Release PR
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.18'
        otp-version: '27'
    
    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        echo "Version format is valid: $VERSION"
    
    - name: Update version in mix.exs
      run: |
        VERSION="${{ github.event.inputs.version }}"
        sed -i "s/version: \"[^\"]*\"/version: \"$VERSION\"/" mix.exs
        echo "Updated mix.exs version to $VERSION"
    
    - name: Update CHANGELOG.md
      run: |
        VERSION="${{ github.event.inputs.version }}"
        CHANGELOG_ENTRY="${{ github.event.inputs.changelog_entry }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create new changelog entry
        NEW_ENTRY="## [$VERSION] - $DATE\n\n### Changed\n- $CHANGELOG_ENTRY\n"
        
        # Insert after "## [Unreleased]" line
        sed -i "/## \\[Unreleased\\]/a\\
\\
$NEW_ENTRY" CHANGELOG.md
        
        # Update the links at the bottom
        sed -i "s|\[Unreleased\]: https://github.com/hl/presto/compare/v.*\.\.\.HEAD|[Unreleased]: https://github.com/hl/presto/compare/v$VERSION...HEAD|" CHANGELOG.md
        sed -i "/\[Unreleased\]:/a\\
[$VERSION]: https://github.com/hl/presto/compare/v0.1.0...v$VERSION" CHANGELOG.md
        
        echo "Updated CHANGELOG.md with version $VERSION"
    
    - name: Install dependencies and validate
      run: |
        mix deps.get
        mix compile --warnings-as-errors
        mix test
        mix format --check-formatted
        mix credo --strict
        mix hex.build
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: prepare release v${{ github.event.inputs.version }}"
        title: "Release v${{ github.event.inputs.version }}"
        body: |
          ## Release Preparation for v${{ github.event.inputs.version }}
          
          This PR prepares the release for version ${{ github.event.inputs.version }}.
          
          ### Changes
          - Updated version in `mix.exs` to `${{ github.event.inputs.version }}`
          - Updated `CHANGELOG.md` with new release entry
          - ${{ github.event.inputs.changelog_entry }}
          
          ### Release Process
          1. ✅ Version updated in mix.exs
          2. ✅ CHANGELOG.md updated
          3. ✅ All tests pass
          4. ✅ Code quality checks pass
          5. ✅ Package builds successfully
          6. ⏳ Review and merge this PR
          7. ⏳ Create and push git tag `v${{ github.event.inputs.version }}`
          8. ⏳ Automated publishing will trigger
          
          ### After Merge
          To complete the release, run:
          ```bash
          git checkout main
          git pull origin main
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}
          ```
          
          This will trigger the automated publishing workflow.
        branch: release/v${{ github.event.inputs.version }}
        delete-branch: true